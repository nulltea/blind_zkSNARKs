// auto-generated by abdlop-codegen.sage from ../tests/abdlop-params1.sage.
//
// protocol is statistically complete with correctness error >= 1 - 2^(-6)
// protocol is simulatable under MLWE(26,18,[-1,1])
// protocol is knowledge-sound with knowledge error <= 2^(-129.0)
//
// Ring
// degree d = 64
// modulus q = 1099511628221, log(q) ~ 40.0
// factors q = q1
//
// Compression
// D = 3
// gamma = 32222, log(gamma) ~ 14.975758
// m = (q-1)/gamma = 34123010, log(m) ~ 25.024242
//
// Dimensions of secrets
// s1: m1 = 10
// m: l = 2
// s2: m2 = 44
//
// Size of secrets
// l2(s1) <= alpha = 25.298221
// m unbounded
// s2 uniform in [-nu,nu] = [-1,1]
//
// Challenge space
// c uniform in [-omega,omega] = [-8,8], o(c)=c, sqrt(l1(o(c)*c)) <= eta = 140
//
// Standard deviations
// stdev1 = 25395.2, log(stdev1/1.55) = 14.0
// stdev2 = 50790.4, log(stdev2/1.55) = 15.0
//
// Repetition rate
// M1 = 6.5193117
// M2 = 7.1475666
// total = 46.597215
//
// Security
// MSIS dimension: 16
// MSIS root hermite factor: 1.0043992
// MLWE dimension: 26
// MLWE root hermite factor: 1.0042737
//
// 23 bit moduli for degree 64: [8386817, 8386177, 8385281, 8384641, 8383489]
// bit length of products: [22, 45, 68, 91, 114]
// inverses: [1, 1664132, -20283, -3834820, -819883]

#include "lazer.h"
static const limb_t params1_q_limbs[] = {1099511628221UL};
static const int_t params1_q = {{(limb_t *)params1_q_limbs, 1, 0}};
static const limb_t params1_qminus1_limbs[] = {1099511628220UL};
static const int_t params1_qminus1 = {{(limb_t *)params1_qminus1_limbs, 1, 0}};
static const limb_t params1_m_limbs[] = {34123010UL};
static const int_t params1_m = {{(limb_t *)params1_m_limbs, 1, 0}};
static const limb_t params1_mby2_limbs[] = {17061505UL};
static const int_t params1_mby2 = {{(limb_t *)params1_mby2_limbs, 1, 0}};
static const limb_t params1_gamma_limbs[] = {32222UL};
static const int_t params1_gamma = {{(limb_t *)params1_gamma_limbs, 1, 0}};
static const limb_t params1_gammaby2_limbs[] = {16111UL};
static const int_t params1_gammaby2 = {{(limb_t *)params1_gammaby2_limbs, 1, 0}};
static const limb_t params1_pow2D_limbs[] = {8UL};
static const int_t params1_pow2D = {{(limb_t *)params1_pow2D_limbs, 1, 0}};
static const limb_t params1_pow2Dby2_limbs[] = {4UL};
static const int_t params1_pow2Dby2 = {{(limb_t *)params1_pow2Dby2_limbs, 1, 0}};
static const limb_t params1_Bsq_limbs[] = {18880080690937UL, 0UL};
static const int_t params1_Bsq = {{(limb_t *)params1_Bsq_limbs, 2, 0}};
static const limb_t params1_scM1_limbs[] = {10855523189514865960UL, 9579610614503599835UL, 6UL};
static const int_t params1_scM1 = {{(limb_t *)params1_scM1_limbs, 3, 0}};
static const limb_t params1_scM2_limbs[] = {8172246634689450953UL, 2722123278990035031UL, 7UL};
static const int_t params1_scM2 = {{(limb_t *)params1_scM2_limbs, 3, 0}};
static const limb_t params1_stdev1sq_limbs[] = {644916183UL, 0UL};
static const int_t params1_stdev1sq = {{(limb_t *)params1_stdev1sq_limbs, 2, 0}};
static const limb_t params1_stdev2sq_limbs[] = {2579664732UL, 0UL};
static const int_t params1_stdev2sq = {{(limb_t *)params1_stdev2sq_limbs, 2, 0}};
static const limb_t params1_inv2_limbs[] = {549755814110UL};
static const int_t params1_inv2 = {{(limb_t *)params1_inv2_limbs, 1, 1}};
static const polyring_t params1_ring = {{params1_q, 64, 41, 6, moduli_d64, 5, params1_inv2}};
static const dcompress_params_t params1_dcomp = {{ params1_q, params1_qminus1, params1_m, params1_mby2, params1_gamma, params1_gammaby2, params1_pow2D, params1_pow2Dby2, 3, 0, 26 }};
static const abdlop_params_t params1 = {{ params1_ring, params1_dcomp, 10, 44, 2, 0, 16, params1_Bsq, 1, 8, 5, 140, 1, 14, params1_scM1, params1_stdev1sq, 1, 15, params1_scM2, params1_stdev2sq}};
